# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

env:
    ADDITIONAL_CTEST_ARGS: " "
    RUN_COVERAGE: FALSE
    TEST_LOG_FILE: test.log
    README_PATH: README.md
    GIT_PUSH_SCRIPT: .github/scripts/git-push.ps1
    BADGE_SCRIPT: .github/scripts/badge-url.ps1
    GH_ACTIONS_EMAIL: "github-actions@github.com"
    GH_ACTIONS_USER_NAME: "github-actions"

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Debug, Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Enable coverage run for Windows Debug builds only
      if: matrix.os == 'windows-latest' && matrix.build_type == 'Debug'
      shell: pwsh
      run: |
        echo "RUN_COVERAGE=TRUE" >> $env:GITHUB_ENV
        echo "ADDITIONAL_CTEST_ARGS=--output-log ${env:TEST_LOG_FILE}" >> $env:GITHUB_ENV

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      shell: pwsh
      run: |
        ctest --build-config ${{ matrix.build_type }} ${env:ADDITIONAL_CTEST_ARGS}.Split(' ')

    - name: Check if test log file was created
      if: env.RUN_COVERAGE == 'TRUE'
      shell: pwsh
      run: |
        if (-not (Test-Path ${env:TEST_LOG_FILE})) {
          Write-Error "Test log file not created, aborting"
        }
    
    - name: Install OpenCppCoverage
      if: env.RUN_COVERAGE == 'TRUE'
      run: choco install OpenCppCoverage

    # Generate and present coverage report
    - name: Run coverage tests
      if: env.RUN_COVERAGE == 'TRUE'
      run: |
        & "C:\Program Files\OpenCppCoverage\OpenCppCoverage.exe" --sources "${env:GITHUB_WORKSPACE}\rpnlib" --export_type cobertura:coverage.xml -- "${{ steps.strings.outputs.build-output-dir }}\tests\${{ matrix.build_type }}\rpn_tests.exe"
    
    # Install ReportGenerator
    - name: Install ReportGenerator CLI  for coverage run
      if: env.RUN_COVERAGE == 'TRUE'
      run: dotnet tool install --global dotnet-reportgenerator-globaltool --version 5.4.8
    
    # Generate and present coverage report`
    - name: Coverage Report for coverage run
      if: env.RUN_COVERAGE == 'TRUE'
      run: |
        reportgenerator -reports:coverage.xml -targetdir:coveragereport -reporttypes:Html,TextSummary,Badges
        cat .\coveragereport\Summary.txt

    # Update passrate badge
    - name: Update passrate badge in README.md for coverage run (temp. disabled)
      if: env.RUN_COVERAGE == 'TRUE'
      run: |
        $readmeUTPattern = '\[!\[Unit tests\]\(https://img\.shields\.io/badge/Unit%20tests-Passed%3A.+%20Failed%3A.+-[a-z]+\)\]\(https://github\.com/grzegorz-ozanski/rpn/actions/runs/[0-9]+\)'
        $badge = .\.github\scripts\badge-url.ps1 ${{ steps.strings.outputs.build-output-dir }}/${env:TEST_LOG_FILE}
        $readmeUT = "[![Unit tests]($badge)](https://github.com/grzegorz-ozanski/rpn/actions/runs/${{ github.run_id }})"

        (Get-Content ${env:README_PATH}) -replace $readmeUTPattern, $readmeUT | Set-Content ${env:README_PATH} -Encoding utf8

    - name: Commit updated README for coverage run (temp. disabled)
      if: env.RUN_COVERAGE == 'TRUE'
      run: |
        pwsh -File ${env:GIT_PUSH_SCRIPT} `
        ${env:README_PATH} `
        "Update passrate badge [skip ci]" `
        ${env:GH_ACTIONS_USER_NAME} `
        ${env:GH_ACTIONS_EMAIL}

    - name: Deploy coverage badge to GitHub Pages for coverage run
      if: env.RUN_COVERAGE == 'TRUE'
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./coveragereport
        destination_dir: coverage
        publish_branch: gh-pages
        force_orphan: true
